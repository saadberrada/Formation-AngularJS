/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
 /* tslint:disable */

import * as import0 from './angular_jqxbargauge';
import * as import1 from '@angular/core/src/change_detection/change_detection';
import * as import2 from '@angular/core/src/linker/view_utils';
import * as import3 from '@angular/core/src/linker/view';
import * as import4 from '@angular/core/src/render/api';
import * as import5 from '@angular/core/src/linker/element';
import * as import6 from '@angular/core/src/di/injector';
import * as import7 from '@angular/core/src/linker/view_type';
import * as import8 from '@angular/core/src/linker/element_ref';
import * as import9 from '@angular/core/src/metadata/view';
import * as import10 from '@angular/core/src/linker/component_factory';
export class Wrapper_jqxBarGaugeComponent {
  context:import0.jqxBarGaugeComponent;
  changed:boolean;
  changes:{[key: string]:any};
  /*private*/ _attrAnimationDuration:any;
  /*private*/ _attrBackgroundColor:any;
  /*private*/ _attrBarSpacing:any;
  /*private*/ _attrBaseValue:any;
  /*private*/ _attrColorScheme:any;
  /*private*/ _attrCustomColorScheme:any;
  /*private*/ _attrDisabled:any;
  /*private*/ _attrEndAngle:any;
  /*private*/ _attrFormatFunction:any;
  /*private*/ _attrLabels:any;
  /*private*/ _attrMax:any;
  /*private*/ _attrMin:any;
  /*private*/ _attrRelativeInnerRadius:any;
  /*private*/ _attrRendered:any;
  /*private*/ _attrStartAngle:any;
  /*private*/ _attrTitle:any;
  /*private*/ _attrTooltip:any;
  /*private*/ _attrUseGradient:any;
  /*private*/ _attrValues:any;
  /*private*/ _attrWidth:any;
  /*private*/ _attrHeight:any;
  constructor(p0:any) {
    this.changed = false;
    this.changes = {};
    this._attrAnimationDuration = import1.UNINITIALIZED;
    this._attrBackgroundColor = import1.UNINITIALIZED;
    this._attrBarSpacing = import1.UNINITIALIZED;
    this._attrBaseValue = import1.UNINITIALIZED;
    this._attrColorScheme = import1.UNINITIALIZED;
    this._attrCustomColorScheme = import1.UNINITIALIZED;
    this._attrDisabled = import1.UNINITIALIZED;
    this._attrEndAngle = import1.UNINITIALIZED;
    this._attrFormatFunction = import1.UNINITIALIZED;
    this._attrLabels = import1.UNINITIALIZED;
    this._attrMax = import1.UNINITIALIZED;
    this._attrMin = import1.UNINITIALIZED;
    this._attrRelativeInnerRadius = import1.UNINITIALIZED;
    this._attrRendered = import1.UNINITIALIZED;
    this._attrStartAngle = import1.UNINITIALIZED;
    this._attrTitle = import1.UNINITIALIZED;
    this._attrTooltip = import1.UNINITIALIZED;
    this._attrUseGradient = import1.UNINITIALIZED;
    this._attrValues = import1.UNINITIALIZED;
    this._attrWidth = import1.UNINITIALIZED;
    this._attrHeight = import1.UNINITIALIZED;
    this.context = new import0.jqxBarGaugeComponent(p0);
  }
  check_attrAnimationDuration(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._attrAnimationDuration,currValue))) {
      this.changed = true;
      this.context.attrAnimationDuration = currValue;
      this.changes['attrAnimationDuration'] = new import1.SimpleChange(this._attrAnimationDuration,currValue);
      this._attrAnimationDuration = currValue;
    }
  }
  check_attrBackgroundColor(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._attrBackgroundColor,currValue))) {
      this.changed = true;
      this.context.attrBackgroundColor = currValue;
      this.changes['attrBackgroundColor'] = new import1.SimpleChange(this._attrBackgroundColor,currValue);
      this._attrBackgroundColor = currValue;
    }
  }
  check_attrBarSpacing(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._attrBarSpacing,currValue))) {
      this.changed = true;
      this.context.attrBarSpacing = currValue;
      this.changes['attrBarSpacing'] = new import1.SimpleChange(this._attrBarSpacing,currValue);
      this._attrBarSpacing = currValue;
    }
  }
  check_attrBaseValue(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._attrBaseValue,currValue))) {
      this.changed = true;
      this.context.attrBaseValue = currValue;
      this.changes['attrBaseValue'] = new import1.SimpleChange(this._attrBaseValue,currValue);
      this._attrBaseValue = currValue;
    }
  }
  check_attrColorScheme(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._attrColorScheme,currValue))) {
      this.changed = true;
      this.context.attrColorScheme = currValue;
      this.changes['attrColorScheme'] = new import1.SimpleChange(this._attrColorScheme,currValue);
      this._attrColorScheme = currValue;
    }
  }
  check_attrCustomColorScheme(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._attrCustomColorScheme,currValue))) {
      this.changed = true;
      this.context.attrCustomColorScheme = currValue;
      this.changes['attrCustomColorScheme'] = new import1.SimpleChange(this._attrCustomColorScheme,currValue);
      this._attrCustomColorScheme = currValue;
    }
  }
  check_attrDisabled(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._attrDisabled,currValue))) {
      this.changed = true;
      this.context.attrDisabled = currValue;
      this.changes['attrDisabled'] = new import1.SimpleChange(this._attrDisabled,currValue);
      this._attrDisabled = currValue;
    }
  }
  check_attrEndAngle(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._attrEndAngle,currValue))) {
      this.changed = true;
      this.context.attrEndAngle = currValue;
      this.changes['attrEndAngle'] = new import1.SimpleChange(this._attrEndAngle,currValue);
      this._attrEndAngle = currValue;
    }
  }
  check_attrFormatFunction(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._attrFormatFunction,currValue))) {
      this.changed = true;
      this.context.attrFormatFunction = currValue;
      this.changes['attrFormatFunction'] = new import1.SimpleChange(this._attrFormatFunction,currValue);
      this._attrFormatFunction = currValue;
    }
  }
  check_attrLabels(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._attrLabels,currValue))) {
      this.changed = true;
      this.context.attrLabels = currValue;
      this.changes['attrLabels'] = new import1.SimpleChange(this._attrLabels,currValue);
      this._attrLabels = currValue;
    }
  }
  check_attrMax(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._attrMax,currValue))) {
      this.changed = true;
      this.context.attrMax = currValue;
      this.changes['attrMax'] = new import1.SimpleChange(this._attrMax,currValue);
      this._attrMax = currValue;
    }
  }
  check_attrMin(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._attrMin,currValue))) {
      this.changed = true;
      this.context.attrMin = currValue;
      this.changes['attrMin'] = new import1.SimpleChange(this._attrMin,currValue);
      this._attrMin = currValue;
    }
  }
  check_attrRelativeInnerRadius(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._attrRelativeInnerRadius,currValue))) {
      this.changed = true;
      this.context.attrRelativeInnerRadius = currValue;
      this.changes['attrRelativeInnerRadius'] = new import1.SimpleChange(this._attrRelativeInnerRadius,currValue);
      this._attrRelativeInnerRadius = currValue;
    }
  }
  check_attrRendered(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._attrRendered,currValue))) {
      this.changed = true;
      this.context.attrRendered = currValue;
      this.changes['attrRendered'] = new import1.SimpleChange(this._attrRendered,currValue);
      this._attrRendered = currValue;
    }
  }
  check_attrStartAngle(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._attrStartAngle,currValue))) {
      this.changed = true;
      this.context.attrStartAngle = currValue;
      this.changes['attrStartAngle'] = new import1.SimpleChange(this._attrStartAngle,currValue);
      this._attrStartAngle = currValue;
    }
  }
  check_attrTitle(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._attrTitle,currValue))) {
      this.changed = true;
      this.context.attrTitle = currValue;
      this.changes['attrTitle'] = new import1.SimpleChange(this._attrTitle,currValue);
      this._attrTitle = currValue;
    }
  }
  check_attrTooltip(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._attrTooltip,currValue))) {
      this.changed = true;
      this.context.attrTooltip = currValue;
      this.changes['attrTooltip'] = new import1.SimpleChange(this._attrTooltip,currValue);
      this._attrTooltip = currValue;
    }
  }
  check_attrUseGradient(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._attrUseGradient,currValue))) {
      this.changed = true;
      this.context.attrUseGradient = currValue;
      this.changes['attrUseGradient'] = new import1.SimpleChange(this._attrUseGradient,currValue);
      this._attrUseGradient = currValue;
    }
  }
  check_attrValues(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._attrValues,currValue))) {
      this.changed = true;
      this.context.attrValues = currValue;
      this.changes['attrValues'] = new import1.SimpleChange(this._attrValues,currValue);
      this._attrValues = currValue;
    }
  }
  check_attrWidth(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._attrWidth,currValue))) {
      this.changed = true;
      this.context.attrWidth = currValue;
      this.changes['attrWidth'] = new import1.SimpleChange(this._attrWidth,currValue);
      this._attrWidth = currValue;
    }
  }
  check_attrHeight(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._attrHeight,currValue))) {
      this.changed = true;
      this.context.attrHeight = currValue;
      this.changes['attrHeight'] = new import1.SimpleChange(this._attrHeight,currValue);
      this._attrHeight = currValue;
    }
  }
  detectChangesInternal(view:import3.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this.changed;
    this.changed = false;
    if (!throwOnChange) { if (changed) {
      this.context.ngOnChanges(this.changes);
      this.changes = {};
    } }
    return changed;
  }
}
var renderType_jqxBarGaugeComponent_Host:import4.RenderComponentType = (null as any);
class _View_jqxBarGaugeComponent_Host0 extends import3.AppView<any> {
  _el_0:any;
  /*private*/ _appEl_0:import5.AppElement;
  _jqxBarGaugeComponent_0_4:Wrapper_jqxBarGaugeComponent;
  constructor(viewUtils:import2.ViewUtils,parentInjector:import6.Injector,declarationEl:import5.AppElement) {
    super(_View_jqxBarGaugeComponent_Host0,renderType_jqxBarGaugeComponent_Host,import7.ViewType.HOST,viewUtils,parentInjector,declarationEl,import1.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import5.AppElement {
    this._el_0 = this.selectOrCreateHostElement('angularBarGauge',rootSelector,(null as any));
    this._appEl_0 = new import5.AppElement(0,(null as any),this,this._el_0);
    var compView_0:any = viewFactory_jqxBarGaugeComponent0(this.viewUtils,this.injector(0),this._appEl_0);
    this._jqxBarGaugeComponent_0_4 = new Wrapper_jqxBarGaugeComponent(new import8.ElementRef(this._el_0));
    this._appEl_0.initComponent(this._jqxBarGaugeComponent_0_4.context,([] as any[]),compView_0);
    compView_0.create(this._jqxBarGaugeComponent_0_4.context,this.projectableNodes,(null as any));
    this.init(([] as any[]).concat([this._el_0]),[this._el_0],([] as any[]),([] as any[]));
    return this._appEl_0;
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import0.jqxBarGaugeComponent) && (0 === requestNodeIndex))) { return this._jqxBarGaugeComponent_0_4.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this._jqxBarGaugeComponent_0_4.detectChangesInternal(this,this._el_0,throwOnChange);
    this.detectContentChildrenChanges(throwOnChange);
    this.detectViewChildrenChanges(throwOnChange);
  }
}
function viewFactory_jqxBarGaugeComponent_Host0(viewUtils:import2.ViewUtils,parentInjector:import6.Injector,declarationEl:import5.AppElement):import3.AppView<any> {
  if ((renderType_jqxBarGaugeComponent_Host === (null as any))) { (renderType_jqxBarGaugeComponent_Host = viewUtils.createRenderComponentType('',0,import9.ViewEncapsulation.None,([] as any[]),{})); }
  return new _View_jqxBarGaugeComponent_Host0(viewUtils,parentInjector,declarationEl);
}
export const jqxBarGaugeComponentNgFactory:import10.ComponentFactory<import0.jqxBarGaugeComponent> = new import10.ComponentFactory<import0.jqxBarGaugeComponent>('angularBarGauge',viewFactory_jqxBarGaugeComponent_Host0,import0.jqxBarGaugeComponent);
const styles_jqxBarGaugeComponent:any[] = ([] as any[]);
var renderType_jqxBarGaugeComponent:import4.RenderComponentType = (null as any);
class _View_jqxBarGaugeComponent0 extends import3.AppView<import0.jqxBarGaugeComponent> {
  _el_0:any;
  constructor(viewUtils:import2.ViewUtils,parentInjector:import6.Injector,declarationEl:import5.AppElement) {
    super(_View_jqxBarGaugeComponent0,renderType_jqxBarGaugeComponent,import7.ViewType.COMPONENT,viewUtils,parentInjector,declarationEl,import1.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import5.AppElement {
    const parentRenderNode:any = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
    this._el_0 = this.renderer.createElement(parentRenderNode,'div',(null as any));
    this.renderer.projectNodes(this._el_0,import2.flattenNestedViewRenderNodes(this.projectableNodes[0]));
    this.init(([] as any[]),[this._el_0],([] as any[]),([] as any[]));
    return (null as any);
  }
}
export function viewFactory_jqxBarGaugeComponent0(viewUtils:import2.ViewUtils,parentInjector:import6.Injector,declarationEl:import5.AppElement):import3.AppView<import0.jqxBarGaugeComponent> {
  if ((renderType_jqxBarGaugeComponent === (null as any))) { (renderType_jqxBarGaugeComponent = viewUtils.createRenderComponentType('',1,import9.ViewEncapsulation.None,styles_jqxBarGaugeComponent,{})); }
  return new _View_jqxBarGaugeComponent0(viewUtils,parentInjector,declarationEl);
}